from django.db import models
from django.utils import timezone
from django.contrib.auth import get_user_model
from decimal import Decimal, ROUND_HALF_UP
from django.core.exceptions import ValidationError
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.db.models import Sum

# مكتبات لشجرة الحسابات
from mptt.models import MPTTModel, TreeForeignKey

# مكتبات لإنشاء رمز QR (اختياري)
import base64
import qrcode
from io import BytesIO
from django.core.files.base import File
from datetime import timezone as dt_timezone

User = get_user_model()

# ثابت لأنواع الحسابات
ACCOUNT_TYPE_CHOICES = (
    ('asset', 'أصول'),
    ('liability', 'خصوم'),
    ('equity', 'حقوق ملكية'),
    ('income', 'إيرادات'),
    ('expense', 'مصروفات'),
)

# ==============================================================================
# 1) إعدادات المنشأة
# ==============================================================================
class CompanySettings(models.Model):
    name = models.CharField(max_length=255, null=True, blank=True, verbose_name="الاسم التجاري عربي")
    en_name = models.CharField(max_length=255, null=True, blank=True, verbose_name="الاسم التجاري بالإنجليزي")
    email = models.EmailField(null=True, blank=True, verbose_name="البريد الإلكتروني")
    phone = models.CharField(max_length=20, null=True, blank=True, verbose_name="رقم الجوال")
    fax = models.CharField(max_length=20, null=True, blank=True, verbose_name="رقم الفاكس")
    address = models.CharField(max_length=255, null=True, blank=True, verbose_name="العنوان (سطر 1)")
    city = models.CharField(max_length=100, null=True, blank=True, verbose_name="المدينة")
    postal_code = models.CharField(max_length=9, null=True, blank=True, verbose_name="الرمز البريدي")
    country = models.CharField(max_length=100, null=True, blank=True, default="المملكة العربية السعودية", verbose_name="الدولة")
    vat_number = models.CharField(max_length=50, null=True, blank=True, verbose_name="الرقم الضريبي")
    cr_number = models.CharField(max_length=50, null=True, blank=True, verbose_name="رقم السجل التجاري")
    vat_rate = models.DecimalField(max_digits=4, decimal_places=2, default=15.00, verbose_name="نسبة الضريبة (%)")
    logo = models.ImageField(upload_to='logos/', null=True, blank=True, verbose_name="شعار المنشأة")

    def __str__(self):
        return self.name or "إعدادات المنشأة"

    class Meta:
        verbose_name = "إعدادات المنشأة"
        verbose_name_plural = "إعدادات المنشآت"


# ==============================================================================
# 2) شجرة الحسابات (ChartOfAccount) مع MPTT
# ==============================================================================
class ChartOfAccount(MPTTModel):
    code = models.CharField(max_length=20, unique=True, verbose_name="رمز الحساب")
    name = models.CharField(max_length=100, verbose_name="اسم الحساب")
    description = models.TextField(blank=True, null=True, verbose_name="الوصف")
    account_type = models.CharField(max_length=50, choices=ACCOUNT_TYPE_CHOICES, verbose_name="نوع الحساب")
    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True,
                            related_name='children', verbose_name="الحساب الأب")
    is_active = models.BooleanField(default=True, verbose_name="نشط")
    balance = models.DecimalField(max_digits=15, decimal_places=2, default=Decimal('0.00'), verbose_name="الرصيد")

    class MPTTMeta:
        order_insertion_by = ['code']

    def __str__(self):
        return f"{self.code} - {self.name}"

    class Meta:
        verbose_name = "حساب"
        verbose_name_plural = "شجرة الحسابات"


# ==============================================================================
# 3) القيود المحاسبية (JournalEntry) وتفاصيلها
# ==============================================================================
class JournalEntry(models.Model):
    date = models.DateField("تاريخ القيد", default=timezone.now)
    description = models.TextField("وصف القيد")
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="تم الإنشاء بواسطة")

    def __str__(self):
        return f"قيد محاسبي بتاريخ {self.date}"


class JournalEntryDetail(models.Model):
    entry = models.ForeignKey(JournalEntry, on_delete=models.CASCADE, related_name="details")
    account = models.ForeignKey(ChartOfAccount, on_delete=models.CASCADE, verbose_name="الحساب")
    debit = models.DecimalField("مدين", max_digits=12, decimal_places=2, default=Decimal('0.00'))
    credit = models.DecimalField("دائن", max_digits=12, decimal_places=2, default=Decimal('0.00'))

    def __str__(self):
        return f"{self.account.name} - مدين: {self.debit} | دائن: {self.credit}"


@receiver(post_save, sender=JournalEntryDetail)
def update_account_balance(sender, instance, created, **kwargs):
    """
    عند إنشاء سطر قيد جديد، نضيف (debit - credit) إلى رصيد الحساب في ChartOfAccount.
    """
    if created:
        account = instance.account
        account.balance += (instance.debit - instance.credit)
        account.save()


# ==============================================================================
# 4) العملاء والموردين
# ==============================================================================

class Supplier(models.Model):
    name = models.CharField(max_length=255, verbose_name="اسم المورد")
    phone = models.CharField(max_length=20, null=True, blank=True, verbose_name="رقم الهاتف")
    email = models.EmailField(null=True, blank=True, verbose_name="البريد الإلكتروني")
    address_line = models.CharField(max_length=255, null=True, blank=True, verbose_name="عنوان الشارع")
    city = models.CharField(max_length=100, null=True, blank=True, verbose_name="المدينة")
    country = models.CharField(max_length=100, null=True, blank=True, default="المملكة العربية السعودية", verbose_name="البلد")
    vat_number = models.CharField(max_length=15, null=True, blank=True, verbose_name="الرقم الضريبي (إن وجد)")
    cr_number = models.CharField(max_length=50, null=True, blank=True, verbose_name="رقم السجل التجاري (إن وجد)")
    notes = models.TextField(null=True, blank=True, verbose_name="ملاحظات إضافية")

    def __str__(self):
        return self.name or "مورد"

    class Meta:
        verbose_name = "مورد"
        verbose_name_plural = "الموردون"


class Customer(models.Model):
    name = models.CharField(max_length=255, verbose_name="اسم العميل")
    phone = models.CharField(max_length=20, null=True, blank=True, verbose_name="رقم الهاتف")
    email = models.EmailField(null=True, blank=True, verbose_name="البريد الإلكتروني")
    address_line = models.CharField(max_length=255, null=True, blank=True, verbose_name="عنوان الشارع")
    city = models.CharField(max_length=100, null=True, blank=True, verbose_name="المدينة")
    country = models.CharField(max_length=100, null=True, blank=True, default="المملكة العربية السعودية", verbose_name="البلد")
    vat_number = models.CharField(max_length=15, null=True, blank=True, verbose_name="الرقم الضريبي (إن وجد)")
    cr_number = models.CharField(max_length=50, null=True, blank=True, verbose_name="رقم السجل التجاري (إن وجد)")
    notes = models.TextField(null=True, blank=True, verbose_name="ملاحظات إضافية")
    credit_limit = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal('0.00'), verbose_name="حد الائتمان")

    def __str__(self):
        return self.name or "عميل"

    class Meta:
        verbose_name = "عميل"
        verbose_name_plural = "عملاء"


# ==============================================================================
# 5) دفتر مساعد للعملاء والموردين (CustomerLedger, SupplierLedger)
# ==============================================================================

class CustomerLedger(models.Model):
    """
    دفتر مساعد (Sub-Ledger) للعملاء. يُسجل كل فاتورة أو دفعة تخص العميل.
    """
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, verbose_name="العميل")
    date = models.DateField(default=timezone.now, verbose_name="التاريخ")
    description = models.CharField(max_length=255, verbose_name="الوصف")
    debit = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'), verbose_name="مدين")
    credit = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'), verbose_name="دائن")
    balance_after = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'), verbose_name="الرصيد بعد الحركة")

    def __str__(self):
        return f"حركة في دفتر العميل {self.customer.name} بتاريخ {self.date}"

    class Meta:
        verbose_name = "حركة دفتر العميل"
        verbose_name_plural = "دفتر مساعد العملاء"


class SupplierLedger(models.Model):
    """
    دفتر مساعد للموردين. يُسجل كل فاتورة أو دفعة تخص المورد.
    """
    supplier = models.ForeignKey(Supplier, on_delete=models.CASCADE, verbose_name="المورد")
    date = models.DateField(default=timezone.now, verbose_name="التاريخ")
    description = models.CharField(max_length=255, verbose_name="الوصف")
    debit = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'), verbose_name="مدين")
    credit = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'), verbose_name="دائن")
    balance_after = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0.00'), verbose_name="الرصيد بعد الحركة")

    def __str__(self):
        return f"حركة في دفتر المورد {self.supplier.name} بتاريخ {self.date}"

    class Meta:
        verbose_name = "حركة دفتر المورد"
        verbose_name_plural = "دفتر مساعد الموردين"





# ==============================================================================
# 6) نموذج طرق الدفع
# ==============================================================================
class PaymentMethod(models.Model):
    name_ar = models.CharField(max_length=50, unique=True, verbose_name="الاسم العربي")
    name_en = models.CharField(max_length=50, unique=True, verbose_name="الاسم الإنجليزي", null=True, blank=True)
    description = models.TextField(null=True, blank=True, verbose_name="الوصف")

    def __str__(self):
        return self.name_ar

    class Meta:
        verbose_name = "طريقة دفع"
        verbose_name_plural = "طرق الدفع"


def get_default_company():
    return CompanySettings.objects.first()


# ==============================================================================
# 7) نموذج الفاتورة (Invoice) وعناصرها (InvoiceItem) مع الحساب المراقب
# ==============================================================================
class Invoice(models.Model):
    INVOICE_TYPES = [
        ('sales', 'فاتورة مبيعات'),
        ('sales_return', 'مرتجع مبيعات'),
        ('purchase', 'فاتورة مشتريات'),
        ('purchase_return', 'مرتجع مشتريات'),
    ]

    INVOICE_STATUS_CHOICES = [
        ('unpaid', 'غير مدفوعة'),
        ('paid', 'مدفوعة'),
        ('cancelled', 'ملغاة'),
    ]

    company = models.ForeignKey(
        CompanySettings,
        on_delete=models.SET_NULL,
        null=True,
        default=get_default_company,
        verbose_name="الشركة"
    )
    customer = models.ForeignKey(
        Customer,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="العميل"
    )
    supplier = models.ForeignKey(
        Supplier,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="المورد"
    )
    invoice_type = models.CharField(
        max_length=20,
        choices=INVOICE_TYPES,
        default='sales',
        verbose_name="نوع الفاتورة"
    )
    invoice_number = models.CharField(
        max_length=50,
        unique=True,
        blank=True,
        verbose_name="رقم الفاتورة"
    )
    status = models.CharField(
        max_length=20,
        choices=INVOICE_STATUS_CHOICES,
        default='unpaid',
        verbose_name="حالة الفاتورة"
    )
    invoice_date = models.DateTimeField(
        default=timezone.now,
        verbose_name="تاريخ ووقت الفاتورة"
    )
    payment_method = models.ForeignKey(
        PaymentMethod,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="طريقة الدفع"
    )
    notes = models.TextField(null=True, blank=True, verbose_name="ملاحظات")
    return_reason = models.TextField(null=True, blank=True, default='0', verbose_name="سبب المرتجع")

    # الحقول المالية
    subtotal_before_discount = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal('0.00'), verbose_name="الإجمالي قبل الخصم")
    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2, default=Decimal('0.00'), verbose_name="نسبة الخصم %")
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal('0.00'), verbose_name="قيمة الخصم")
    subtotal_before_tax = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal('0.00'), verbose_name="المجموع قبل الضريبة")
    tax_rate = models.DecimalField(max_digits=5, decimal_places=2, default=Decimal('15.00'), verbose_name="نسبة الضريبة")
    tax_amount = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal('0.00'), verbose_name="قيمة الضريبة")
    total_amount = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal('0.00'), verbose_name="الصافي")
    qr_code = models.ImageField(upload_to='qr_codes/', null=True, blank=True, verbose_name="كود QR")
    due_date = models.DateField(null=True, blank=True, verbose_name="تاريخ الاستحقاق")
    is_posted = models.BooleanField(default=False, verbose_name="تم إنشاء القيد؟")

    class Meta:
        verbose_name = "فاتورة"
        verbose_name_plural = "الفواتير"

    def __str__(self):
        return f"{self.invoice_number} - {self.invoice_date}"

    @property
    def is_return_invoice(self):
        return self.invoice_type in ['sales_return', 'purchase_return']

    @property
    def paid_amount(self):
        """
        نعيد 0 حاليًا لأن الدفعات لا ترتبط مباشرة بهذه الفاتورة في الأسلوب المراقب.
        """
        return Decimal('0.00')

    @property
    def remaining_amount(self):
        return self.total_amount - self.paid_amount

    def generate_invoice_number(self):
        last_invoice = Invoice.objects.order_by('-id').first()
        if last_invoice and last_invoice.invoice_number:
            try:
                clean_number = last_invoice.invoice_number.replace("R", "")
                last_num = int(clean_number)
            except (ValueError, TypeError):
                last_num = 990
        else:
            last_num = 990
        prefix = "R" if self.invoice_type in ['sales_return', 'purchase_return'] else ""
        return f"{prefix}{last_num + 10}"

    def calculate_totals(self):
        items = self.invoice_items.all()
        if not items.exists():
            self.subtotal_before_discount = Decimal('0.00')
            self.discount = Decimal('0.00')
            self.discount_percentage = Decimal('0.00')
            self.subtotal_before_tax = Decimal('0.00')
            self.tax_amount = Decimal('0.00')
            self.total_amount = Decimal('0.00')
        else:
            self.subtotal_before_discount = sum(item.total_before_tax for item in items)
            if self.subtotal_before_discount > 0:
                if self.discount_percentage > 0:
                    self.discount = (self.subtotal_before_discount *
                                     self.discount_percentage / Decimal('100')
                                    ).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
                elif self.discount > 0:
                    self.discount_percentage = (self.discount * 100 /
                                                self.subtotal_before_discount
                                               ).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
            else:
                self.discount = Decimal('0.00')
                self.discount_percentage = Decimal('0.00')

            self.subtotal_before_tax = self.subtotal_before_discount - self.discount
            self.tax_amount = (self.subtotal_before_tax * self.tax_rate / 100).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
            self.total_amount = self.subtotal_before_tax + self.tax_amount

    def save(self, *args, **kwargs):
        if not self.invoice_number:
            self.invoice_number = self.generate_invoice_number()
        if self.pk is None:
            super().save(*args, **kwargs)
        self.calculate_totals()
        if self.status != 'cancelled':
            self.status = 'paid' if self.remaining_amount <= 0 else 'unpaid'
        super().save(*args, **kwargs)

        if not self.is_posted and self.status != 'cancelled':
            self.create_journal_entry()
            self.is_posted = True
            super().save(update_fields=['is_posted'])

    def create_journal_entry(self):
        """
        إنشاء قيد محاسبي في الدفاتر العامة (General Ledger).
        أيضًا تسجيل الحركة في الدفتر المساعد (CustomerLedger أو SupplierLedger) بدلًا من الحساب الخاص.
        """
        from .models import JournalEntry, JournalEntryDetail, CustomerLedger, SupplierLedger

        # حسابات المراقبة
        ar_account = ChartOfAccount.objects.get(code='1100')  # حساب مراقب للعملاء
        ap_account = ChartOfAccount.objects.get(code='2100')  # حساب مراقب للموردين

        revenue_account = ChartOfAccount.objects.get(code='4000')
        purchase_account = ChartOfAccount.objects.get(code='5000')
        tax_account = ChartOfAccount.objects.get(code='2200')
        discount_account = ChartOfAccount.objects.get(code='4100')

        if self.status == 'cancelled':
            return

        entry = JournalEntry.objects.create(
            date=self.invoice_date.date(),
            description=f"فاتورة {self.invoice_number} - {self.get_invoice_type_display()}"
        )

        if self.invoice_type == 'sales':
            # Dr AR, Cr Revenue (+tax, +discount)
            JournalEntryDetail.objects.create(entry=entry, account=revenue_account, credit=self.subtotal_before_tax)
            if self.tax_amount > 0:
                JournalEntryDetail.objects.create(entry=entry, account=tax_account, credit=self.tax_amount)
            if self.discount > 0:
                JournalEntryDetail.objects.create(entry=entry, account=discount_account, debit=self.discount)
            JournalEntryDetail.objects.create(entry=entry, account=ar_account, debit=self.total_amount)

            # إضافة حركة في الدفتر المساعد للعميل
            if self.customer:
                self._update_customer_ledger(
                    debit_val=self.total_amount,
                    credit_val=Decimal('0.00'),
                    description=f"فاتورة #{self.invoice_number}"
                )

        elif self.invoice_type == 'purchase':
            # Dr Purchase, Cr AP
            JournalEntryDetail.objects.create(entry=entry, account=purchase_account, debit=self.subtotal_before_tax)
            if self.tax_amount > 0:
                JournalEntryDetail.objects.create(entry=entry, account=tax_account, debit=self.tax_amount)
            if self.discount > 0:
                JournalEntryDetail.objects.create(entry=entry, account=discount_account, credit=self.discount)
            JournalEntryDetail.objects.create(entry=entry, account=ap_account, credit=self.total_amount)

            # الدفتر المساعد للمورد
            if self.supplier:
                self._update_supplier_ledger(
                    debit_val=Decimal('0.00'),
                    credit_val=self.total_amount,
                    description=f"فاتورة #{self.invoice_number}"
                )

        elif self.invoice_type == 'sales_return':
            entry.description += " (مرتجع مبيعات)"
            entry.save()
            # Dr Revenue, Cr AR
            JournalEntryDetail.objects.create(entry=entry, account=revenue_account, debit=self.subtotal_before_tax)
            if self.tax_amount > 0:
                JournalEntryDetail.objects.create(entry=entry, account=tax_account, debit=self.tax_amount)
            if self.discount > 0:
                JournalEntryDetail.objects.create(entry=entry, account=discount_account, credit=self.discount)
            JournalEntryDetail.objects.create(entry=entry, account=ar_account, credit=self.total_amount)

            if self.customer:
                self._update_customer_ledger(
                    debit_val=Decimal('0.00'),
                    credit_val=self.total_amount,
                    description=f"مرتجع فاتورة #{self.invoice_number}"
                )

        elif self.invoice_type == 'purchase_return':
            entry.description += " (مرتجع مشتريات)"
            entry.save()
            # Dr AP, Cr Purchase
            JournalEntryDetail.objects.create(entry=entry, account=ap_account, debit=self.total_amount)
            JournalEntryDetail.objects.create(entry=entry, account=purchase_account, credit=self.subtotal_before_tax)
            if self.tax_amount > 0:
                JournalEntryDetail.objects.create(entry=entry, account=tax_account, credit=self.tax_amount)
            if self.discount > 0:
                JournalEntryDetail.objects.create(entry=entry, account=discount_account, debit=self.discount)

            if self.supplier:
                self._update_supplier_ledger(
                    debit_val=self.total_amount,
                    credit_val=Decimal('0.00'),
                    description=f"مرتجع فاتورة #{self.invoice_number}"
                )

    def _update_customer_ledger(self, debit_val, credit_val, description):
        """
        إضافة حركة في الدفتر المساعد للعميل (CustomerLedger).
        """
        from .models import CustomerLedger
        last_entry = CustomerLedger.objects.filter(customer=self.customer).order_by('-id').first()
        old_balance = last_entry.balance_after if last_entry else Decimal('0.00')
        new_balance = old_balance + debit_val - credit_val

        CustomerLedger.objects.create(
            customer=self.customer,
            date=self.invoice_date,
            description=description,
            debit=debit_val,
            credit=credit_val,
            balance_after=new_balance
        )

    def _update_supplier_ledger(self, debit_val, credit_val, description):
        """
        إضافة حركة في الدفتر المساعد للمورد (SupplierLedger).
        """
        from .models import SupplierLedger
        last_entry = SupplierLedger.objects.filter(supplier=self.supplier).order_by('-id').first()
        old_balance = last_entry.balance_after if last_entry else Decimal('0.00')
        new_balance = old_balance + debit_val - credit_val

        SupplierLedger.objects.create(
            supplier=self.supplier,
            date=self.invoice_date,
            description=description,
            debit=debit_val,
            credit=credit_val,
            balance_after=new_balance
        )

    
    
    
    
    
    
    def generate_qr_code(self):
        # اختياري
        if not self.company or not self.company.vat_number:
            return
        timestamp = self.invoice_date.astimezone(dt_timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
        data = {
            1: self.company.name or "",
            2: self.company.vat_number or "",
            3: timestamp,
            4: f"{self.total_amount:.2f}",
            5: f"{self.tax_amount:.2f}"
        }
        tlv_data = bytearray()
        for tag, value in data.items():
            value_bytes = value.encode('utf-8')
            tlv_data += bytes([tag]) + bytes([len(value_bytes)]) + value_bytes
        base64_payload = base64.b64encode(tlv_data).decode('utf-8')
        qr = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_M, box_size=4, border=2)
        qr.add_data(base64_payload)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        filename = f'qr_{self.invoice_number}.png'
        self.qr_code.save(filename, File(buffer), save=False)

    def clean(self):
        super().clean()
        if self.invoice_type in ['sales', 'sales_return']:
            if not self.customer:
                raise ValidationError("يجب اختيار عميل لفاتورة المبيعات أو المرتجع.")
            if self.supplier:
                raise ValidationError("لا يمكن اختيار مورد لفاتورة المبيعات أو المرتجع.")
        elif self.invoice_type in ['purchase', 'purchase_return']:
            if not self.supplier:
                raise ValidationError("يجب اختيار مورد لفاتورة المشتريات أو المرتجع.")
            if self.customer:
                raise ValidationError("لا يمكن اختيار عميل لفاتورة المشتريات أو المرتجع.")

        if self.is_return_invoice and not self.return_reason:
            raise ValidationError("يجب إدخال سبب المرتجع.")
        if self.total_amount < 0:
            raise ValidationError("المجموع الكلي لا يمكن أن يكون أقل من صفر.")


class InvoiceItem(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE, related_name='invoice_items',
                                verbose_name='الفاتورة', null=True, blank=True)
    product = models.ForeignKey('Product', on_delete=models.PROTECT, verbose_name='المنتج')
    quantity = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='الكمية', default=1)
    base_unit = models.ForeignKey('Unit', on_delete=models.CASCADE, verbose_name="الوحدة الأساسية",
                                  editable=False, null=True, blank=True)
    unit = models.ForeignKey('UnitConversion', on_delete=models.SET_NULL, null=True, blank=True, verbose_name="الوحدة المختارة")
    unit_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="السعر لكل وحدة", default=0)
    total_before_tax = models.DecimalField(max_digits=10, decimal_places=2, default=0, editable=False, verbose_name='المجموع قبل الضريبة')
    tax_rate = models.DecimalField(max_digits=5, decimal_places=2, default=15, verbose_name="نسبة الضريبة")
    total = models.DecimalField(max_digits=10, decimal_places=2, default=0, editable=False, verbose_name='المجموع النهائي')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاريخ التعديل')

    def save(self, *args, **kwargs):
        if not self.product:
            raise ValidationError('يجب اختيار منتج')
        self.base_unit = self.product.unit
        conversion_factor = Decimal('1')
        if self.unit and self.unit.conversion_factor:
            conversion_factor = self.unit.conversion_factor
        if not self.unit_price:
            self.unit_price = self.product.price * conversion_factor
        new_base_price = self.unit_price / conversion_factor
        if self.product.price != new_base_price:
            self.product.price = new_base_price
            self.product.save()
        self.total_before_tax = self.quantity * self.unit_price
        self.total = self.total_before_tax
        super().save(*args, **kwargs)

    def clean(self):
        if self.quantity <= 0:
            raise ValidationError('الكمية يجب أن تكون أكبر من صفر')
        if not self.product_id:
            raise ValidationError('يجب اختيار منتج')
        super().clean()

    def __str__(self):
        unit_display = ""
        if self.unit:
            unit_display = self.unit.larger_unit_name
        elif self.base_unit:
            unit_display = self.base_unit.abbreviation
        return f"{self.product.name_ar} - {self.quantity} {unit_display}"


@receiver(post_save, sender=InvoiceItem)
def update_invoice_totals(sender, instance, **kwargs):
    invoice = instance.invoice
    if invoice and not kwargs.get('raw', False):
        invoice.calculate_totals()
        invoice.generate_qr_code()
        invoice.save(update_fields=[
            'subtotal_before_discount',
            'discount',
            'discount_percentage',
            'subtotal_before_tax',
            'tax_amount',
            'total_amount',
            'qr_code'
        ])


# ==============================================================================
# 8) نموذج الدفعة للعميل (CustomerPayment) والمورد (SupplierPayment) بأسلوب الحساب المراقب
# ==============================================================================
class CustomerPayment(models.Model):
    PAYMENT_TYPE_CHOICES = [
        ('receipt', 'سند قبض من العميل'),
        ('refund', 'سند رد مبلغ للعميل'),
    ]

    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name='payments', verbose_name="العميل")
    payment_type = models.CharField(max_length=20, choices=PAYMENT_TYPE_CHOICES, default='receipt', verbose_name="نوع الدفعة")
    amount = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal('0.00'), verbose_name="مبلغ الدفعة")
    date = models.DateField(default=timezone.now, verbose_name="تاريخ الدفعة")
    notes = models.TextField(null=True, blank=True, verbose_name="ملاحظات")
    is_posted = models.BooleanField(default=False, verbose_name="تم إنشاء القيد؟")

    def __str__(self):
        return f"{self.get_payment_type_display()} للعميل {self.customer.name} - {self.amount}"

    def clean(self):
        super().clean()
        if self.amount <= 0:
            raise ValidationError("المبلغ يجب أن يكون أكبر من صفر.")

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        if not self.is_posted:
            self.create_journal_entry()
            self.is_posted = True
            super().save(update_fields=['is_posted'])

    def create_journal_entry(self):
        from .models import JournalEntry, JournalEntryDetail, CustomerLedger

        entry = JournalEntry.objects.create(
            date=self.date,
            description=f"{self.get_payment_type_display()} للعميل {self.customer.name}"
        )

        # حساب المراقبة للعملاء
        ar_account = ChartOfAccount.objects.get(code='1100')  # Accounts Receivable
        cash_account = ChartOfAccount.objects.get(code='1000')  # حساب النقدية

        if self.payment_type == 'receipt':
            # Dr Cash, Cr AR
            JournalEntryDetail.objects.create(entry=entry, account=cash_account, debit=self.amount)
            JournalEntryDetail.objects.create(entry=entry, account=ar_account, credit=self.amount)
            self._update_customer_ledger(
                debit_val=Decimal('0.00'),
                credit_val=self.amount,
                description=f"سند قبض #{self.id}"
            )
        else:
            # Dr AR, Cr Cash
            JournalEntryDetail.objects.create(entry=entry, account=ar_account, debit=self.amount)
            JournalEntryDetail.objects.create(entry=entry, account=cash_account, credit=self.amount)
            self._update_customer_ledger(
                debit_val=self.amount,
                credit_val=Decimal('0.00'),
                description=f"سند رد مبلغ #{self.id}"
            )

    def _update_customer_ledger(self, debit_val, credit_val, description):
        from .models import CustomerLedger
        last_entry = CustomerLedger.objects.filter(customer=self.customer).order_by('-id').first()
        old_balance = last_entry.balance_after if last_entry else Decimal('0.00')
        new_balance = old_balance + debit_val - credit_val

        CustomerLedger.objects.create(
            customer=self.customer,
            date=self.date,
            description=description,
            debit=debit_val,
            credit=credit_val,
            balance_after=new_balance
        )


class SupplierPayment(models.Model):
    PAYMENT_TYPE_CHOICES = [
        ('payment', 'سند صرف للمورد'),
        ('refund', 'المورد يرد مبلغ'),
    ]

    supplier = models.ForeignKey(Supplier, on_delete=models.CASCADE, related_name='payments', verbose_name="المورد")
    payment_type = models.CharField(max_length=20, choices=PAYMENT_TYPE_CHOICES, default='payment', verbose_name="نوع الدفعة")
    amount = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal('0.00'), verbose_name="مبلغ الدفعة")
    date = models.DateField(default=timezone.now, verbose_name="تاريخ الدفعة")
    notes = models.TextField(null=True, blank=True, verbose_name="ملاحظات")
    is_posted = models.BooleanField(default=False, verbose_name="تم إنشاء القيد؟")

    def __str__(self):
        return f"{self.get_payment_type_display()} للمورد {self.supplier.name} - {self.amount}"

    def clean(self):
        super().clean()
        if self.amount <= 0:
            raise ValidationError("المبلغ يجب أن يكون أكبر من صفر.")

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        if not self.is_posted:
            self.create_journal_entry()
            self.is_posted = True
            super().save(update_fields=['is_posted'])

    def create_journal_entry(self):
        from .models import JournalEntry, JournalEntryDetail, SupplierLedger

        entry = JournalEntry.objects.create(
            date=self.date,
            description=f"{self.get_payment_type_display()} للمورد {self.supplier.name}"
        )
        # حساب المراقبة للموردين
        ap_account = ChartOfAccount.objects.get(code='2100')  # Accounts Payable
        cash_account = ChartOfAccount.objects.get(code='1000')  # النقدية

        if self.payment_type == 'payment':
            # Dr AP, Cr Cash
            JournalEntryDetail.objects.create(entry=entry, account=ap_account, debit=self.amount)
            JournalEntryDetail.objects.create(entry=entry, account=cash_account, credit=self.amount)
            self._update_supplier_ledger(
                debit_val=self.amount,
                credit_val=Decimal('0.00'),
                description=f"سند صرف #{self.id}"
            )
        else:
            # Dr Cash, Cr AP
            JournalEntryDetail.objects.create(entry=entry, account=cash_account, debit=self.amount)
            JournalEntryDetail.objects.create(entry=entry, account=ap_account, credit=self.amount)
            self._update_supplier_ledger(
                debit_val=Decimal('0.00'),
                credit_val=self.amount,
                description=f"سند رد مبلغ #{self.id}"
            )

    def _update_supplier_ledger(self, debit_val, credit_val, description):
        from .models import SupplierLedger
        last_entry = SupplierLedger.objects.filter(supplier=self.supplier).order_by('-id').first()
        old_balance = last_entry.balance_after if last_entry else Decimal('0.00')
        new_balance = old_balance + debit_val - credit_val

        SupplierLedger.objects.create(
            supplier=self.supplier,
            date=self.date,
            description=description,
            debit=debit_val,
            credit=credit_val,
            balance_after=new_balance
        )


# ==============================================================================
# 9) وظائف التقارير المالية (ميزان مراجعة، كشف حساب عميل/مورد)
# ==============================================================================
def generate_trial_balance():
    """
    ميزان مراجعة بسيط: لكل حساب نجمع المدين والدائن ونحسب الرصيد.
    """
    accounts = ChartOfAccount.objects.all()
    balance_data = []
    for account in accounts:
        debit_sum = JournalEntryDetail.objects.filter(account=account).aggregate(Sum('debit'))['debit__sum'] or Decimal('0.00')
        credit_sum = JournalEntryDetail.objects.filter(account=account).aggregate(Sum('credit'))['credit__sum'] or Decimal('0.00')
        balance = debit_sum - credit_sum
        balance_data.append({
            'account_code': account.code,
            'account_name': account.name,
            'debit': debit_sum,
            'credit': credit_sum,
            'balance': balance
        })
    return balance_data


def get_customer_statement(customer):
    """
    يمكننا عرض الحركات من خلال CustomerLedger بدلًا من الاعتماد على account في ChartOfAccount.
    """
    ledger_entries = CustomerLedger.objects.filter(customer=customer).order_by('date', 'id')
    return ledger_entries


def get_supplier_statement(supplier):
    ledger_entries = SupplierLedger.objects.filter(supplier=supplier).order_by('date', 'id')
    return ledger_entries


# ==============================================================================
# 10) نماذج إدارة الوحدات والمنتجات
# ==============================================================================
class Unit(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name="اسم الوحدة الأساسية")
    abbreviation = models.CharField(max_length=20, verbose_name="التمييز")
    template = models.CharField(max_length=50, verbose_name="القالب", help_text="مثال: الوزن")
    is_active = models.BooleanField(default=True, verbose_name="نشط")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "وحدة"
        verbose_name_plural = "الوحدات"


class UnitConversion(models.Model):
    base_unit = models.ForeignKey(Unit, on_delete=models.CASCADE, related_name="conversions", verbose_name="الوحدة الأساسية")
    larger_unit_name = models.CharField(max_length=100, verbose_name="اسم الوحدة الأكبر")
    larger_unit_abbreviation = models.CharField(max_length=20, verbose_name="التمييز")
    conversion_factor = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="معامل التحويل")

    def __str__(self):
        return f"{self.base_unit.name} -> {self.larger_unit_name} ({self.conversion_factor})"

    class Meta:
        verbose_name = "تحويل وحدة"
        verbose_name_plural = "تحويلات الوحدات"


class ProductCategory(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name="اسم الصنف")
    description = models.TextField(null=True, blank=True, verbose_name="الوصف")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "صنف المنتج"
        verbose_name_plural = "أصناف المنتجات"


class Product(models.Model):
    name_ar = models.CharField(max_length=255, verbose_name="اسم المنتج بالعربي")
    serial_number = models.CharField(max_length=255, unique=True, verbose_name="الرقم التسلسلي")
    category = models.ForeignKey(ProductCategory, on_delete=models.CASCADE, related_name="products", verbose_name="الصنف")
    unit = models.ForeignKey(Unit, on_delete=models.SET_NULL, null=True, verbose_name="وحدة القياس")
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="السعر")
    description = models.TextField(null=True, blank=True, verbose_name="الوصف")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="تاريخ الإنشاء")
    stock = models.PositiveIntegerField(default=999999999, verbose_name="الكمية المتاحة", blank=True)
    low_stock_threshold = models.PositiveIntegerField(default=10, verbose_name="حد التنبيه", null=True, blank=True)
    inventory_account = models.ForeignKey(
        ChartOfAccount,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='inventory_products',
        verbose_name="حساب المخزون"
    )

    def __str__(self):
        return self.name_ar

    class Meta:
        verbose_name = "منتج"
        verbose_name_plural = "المنتجات"
